<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DAL.Utilities</name>
    </assembly>
    <members>
        <member name="T:DAL.Utilities.Data.Constants">
            <summary>
            Deals with special values for value types that are used to represent NULL when retrieving or sending data to the Database
            </summary>
        </member>
        <member name="P:DAL.Utilities.Data.Consultant.Currency.Symbol">
            <summary>
            The $ part
            </summary>
        </member>
        <member name="P:DAL.Utilities.Data.Consultant.Currency.ThousandsSeparator">
            <summary>
            The , part
            </summary>
        </member>
        <member name="P:DAL.Utilities.Data.Consultant.Currency.DecimalSeparator">
            <summary>
            The . part
            </summary>
        </member>
        <member name="P:DAL.Utilities.Data.Consultant.Currency.ShortDescription">
            <summary>
            The short description string. Example: $100 USD, $100 CAD.
            </summary>
        </member>
        <member name="P:DAL.Utilities.Data.Consultant.Currency.LongDescription">
            <summary>
            The long description string. Example: $100 US Dollars, $100 Canadian Dollars
            </summary>
        </member>
        <member name="M:DAL.Utilities.Data.Geography.State.GetByCountry(DAL.Utilities.Data.Geography.Country)">
            <summary>
            Returns the list of states by country. This function scans the whole list and is slow (no caching)
            </summary>
            <param name="country"></param>
            <returns></returns>
        </member>
        <member name="T:DAL.Utilities.Library.Compare.DynamicCompare`1">
            <summary>
            This class sorts a list by a dynamically chosen property.
            Usage:
            	Create a SortProperty object for each property to sort on (ie, Last Name, then First Name, then Middle Initial).
            	Instantiate the DynamicCompare class with the SortProperties.  You may include a delegate
            	method to perform the compare (DynamicCompare passes the property values as a string to the delegate method)
            	If you do not use a delegate method then the property you are comparing on must support the CompareTo method.
            	
            	All the properties that you sort on must implement IComparable
            </summary>
            <remarks>
            .Net Sort is not a stable sort, meaning that if you have duplicate keys the output order is not the
            same as the input order. For example say you have the following list:
            	Group 1, Smith
            	Group 1, John
            	Group 2, Sally
            	Group 2, Erin
            
            Sorting this list on the Group column multiple times will sort
            that column properly but the Name column will suffle around (e.g. Smith and John will
            change places in the sorted list for each sort performed).
            
            The only way to overcome this is to sort manually with a stable sort algorithm or sort on
            a unique key (e.g., sort on Group then Name).
            
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DAL.Utilities.Library.DataAccess.ActiveDirectory.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create a fully instantiated Query object. A query must be set before attempting an execute.
            </summary>
            <param name="user_id">The user's id.</param>
            <param name="password">The user's password.</param>
            <param name="domain">The user's domain. The domain can optionally be tied to the user's id in the domain/userid format.</param>
            <param name="host">The AD host name. Should include the LDAP:// protocol identifier.</param>
            <param name="path">The initial directory path.</param>
        </member>
        <member name="M:DAL.Utilities.Library.DataAccess.ActiveDirectory.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)">
            <summary>
            Instantiates an Active Directory Query object.  Validates the user's credentials against the directory.
            If authentication is successful the Property IsValidLogin is set to true.
            </summary>
            <param name="user_id">The user's id.</param>
            <param name="password">The user's password.</param>
            <param name="domain">The user's domain. The domain can optionally be tied to the user's id
            in the domain/userid format. Setting both user_id and domain with will cause the domain to be duplicated.</param>
            <param name="host">The AD host name. Should include the LDAP:// protocol identifier.</param>
            <param name="path">The initial directory path.</param>
            <param name="query">The LDAP query to make against the directory. This query is not executed until the Execute method is called.</param>
        </member>
        <member name="P:DAL.Utilities.Library.DataAccess.ActiveDirectory.IsValidLogin">
            <summary>
            Read-only. Indicates whether the provided user/host/path information was accessed successfully.
            </summary>
        </member>
        <member name="P:DAL.Utilities.Library.DataAccess.ActiveDirectory.IsSuccessfulQuery">
            <summary>
            Read-only. Indicates whether the last executed query was successful. It does not indicate if any data was returned,
            only that no errors have occured.
            </summary>
        </member>
        <member name="P:DAL.Utilities.Library.DataAccess.ActiveDirectory.Query">
            <summary>
            Get/Set the QueryString.
            </summary>
        </member>
        <member name="P:DAL.Utilities.Library.DataAccess.ActiveDirectory.UserName">
            <summary>
            Get/Set the user's login name.
            </summary>
        </member>
        <member name="P:DAL.Utilities.Library.DataAccess.ActiveDirectory.Password">
            <summary>
            Set the user password.  Cannot be read back.
            </summary>
        </member>
        <member name="P:DAL.Utilities.Library.DataAccess.ActiveDirectory.Domain">
            <summary>
            Get/Set the user's domain.
            </summary>
        </member>
        <member name="P:DAL.Utilities.Library.DataAccess.ActiveDirectory.Host">
            <summary>
            Changing the host causes any authentication to be cleared. You must authenticate again.
            </summary>
        </member>
        <member name="P:DAL.Utilities.Library.DataAccess.ActiveDirectory.QueryScope">
            <summary>
            Default is Query.QueryScopes.Subtree
            </summary>
            <remarks>This maps the System.ActiveDirectory SearchScopes to a local enum</remarks>
        </member>
        <member name="P:DAL.Utilities.Library.DataAccess.ActiveDirectory.ResultScope">
            <summary>
            Default is Query.ResultScope.One
            </summary>
        </member>
        <member name="P:DAL.Utilities.Library.DataAccess.ActiveDirectory.SizeLimit">
            <summary>
            Get/Set the maximum records to retrieve
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataAccess.ActiveDirectory.Authenticate">
            <summary>
            Authenticates the user/host data. Sets the IsValidLogin Property.  If the current data
            has already been authenticated then the value of IsValidLogin is returned without re-authenticating.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataAccess.ActiveDirectory.ClearAuthentication">
            <summary>
            Resets the object when Authentication information is changed.  This includes
            the PropertiesToLoad values.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataAccess.ActiveDirectory.Execute">
            <summary>
            Executes the current query.  The results are stored in the QueryResults property.
            </summary>
            <returns>A successful query returns true. If an error occurs false is returned. The a true result does not indicate
            whether any data was returned by the query.</returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataAccess.ActiveDirectoryResult.SaveChanges">
            <summary>
            Saves any changes made to the result object. Returns true if successful. Otherwise returns false. Does not throw any exceptions
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataAccess.DataSetHelper.FilterDistinct(System.Data.DataTable,System.String,System.String[])">
            <summary>
            Returns a new table filtered by filter with distinct values from the "columnName" column.
            </summary>
        </member>
        <member name="T:DAL.Utilities.Library.DataTypes.Booleans">
            <summary>
            Summary description for Boolean.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Booleans.Parse(System.Int32)">
            <summary>
            Determines true or false from an integer value
            </summary>
            <param name="value">The Integer Value</param>
            <returns>False for zero (0) and negative one (-1) and true for anything else</returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Booleans.Parse(System.String)">
            <summary>
            Converts 0, -1, false, off, no, n, null, and "" to false.  
            Converts 1, true, on, yes, y to true.
            Any other value returns false
            </summary>
            <param name="value">The value to parse</param>
            <returns>Returns True or False</returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Booleans.Parse(System.String,System.Boolean)">
            <summary>
            Converts 0, -1, false, off, no, n, f, null, and "" to false.  
            Converts 1, true, on, yes, y , t to true.
            Any other value returns false
            </summary>
            <param name="value">The string to convert to bool</param>
            <param name="default_value">The value to return if the string cannot be converted</param>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Booleans.Parse(System.Object)">
            <summary>
            Converts an object to a bool by a direct cast.
            </summary>
            <returns>If casting fails the it returns false, otherwise it returns the casted value.</returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Booleans.Parse(System.Object,System.Boolean)">
            <summary>
            Converts an object to a bool by a direct cast.
            </summary>
            <returns>If casting fails the it returns false, otherwise it returns the default_value.</returns>
        </member>
        <member name="T:DAL.Utilities.Library.DataTypes.ConnectionString">
            <summary>
            A not terribly intelligent connection string handling class.
            It won't detect malformed connection strings but it will
            break them apart and build them
            </summary>
        </member>
        <member name="T:DAL.Utilities.Library.DataTypes.Arrays">
            <summary>
            Summary description for String.
            </summary>
        </member>
        <member name="T:DAL.Utilities.Library.DataTypes.Flags">
            <summary>
            Summary description for String.
            </summary>
        </member>
        <member name="T:DAL.Utilities.Library.DataTypes.DateUtil">
            <summary>
            Summary description for Date.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.DateUtil.IsNull(System.DateTime)">
            <summary>
            Checks of the date equals DateTime.MinValue and pretends it is NULL
            </summary>
            <param name="dtValue"></param>
            <returns>True if dtValue == DateTime.MinValue</returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.DateUtil.Parse(System.String)">
            <summary>
            Converts the string to a DateTime object.
            </summary>
            <param name="strValue"></param>
            <returns>Returns the DateTime? object.  Returns NULL if parsing fails.</returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.DateUtil.Parse(System.String,System.DateTime)">
            <summary>
            Converts the string to a DateTime object. If the conversion fails the defaultDate is returned.
            </summary>
            <param name="strValue"></param>
            <param name="defaultDate"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.DateUtil.ParseYear(System.String)">
            <summary>
            Converts a YYYY or YY formatted year to a DateTime object.
            </summary>
            <remarks>Accepts years ranging from DateTime's Min and Max Year values.
            For 2 digit years where (YY lt 40) converts to 2000s and (YY gte 40) converts to 1900s.
            </remarks>
            <param name="strYear">The YYYY or YY year string</param>
            <returns>Returns 1/1/YYYY when successful.  Returns null on failure.</returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.DateUtil.ParseExpirationDate(System.String,System.DateTime)">
            <summary>
            Parses a credit card expiration date string formatted mmyy to a DateTime.
            Sets the day of month to the last day of the month.  No time component is included
            
            Handles dates formatted MMYY and YYYYMM
            </summary>
            <param name="mmyy"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.DateUtil.ParseExpirationDate(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Takes the given month and year and returns a date for the last day of the month at time 23:59:59.0
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.DateUtil.Build(System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a date from date pieces. If the date is not valid DateTime.MinValue is returned
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.DateUtil.Build(System.String,System.String,System.String)">
            <summary>
            Builds a date from date pieces. If the date is not valid DateTime.MinValue is returned
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.DateUtil.SpanToHumanString(System.TimeSpan,DAL.Utilities.Data.Time,DAL.Utilities.Data.Time,System.Boolean,System.Boolean)">
            <summary>
            Convert a time span to Days, Hours, Seconds, Millisecond human readable string
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Decimals.IsCurrency(System.String)">
            <summary>
            Tests for currency value.  Allowed characters are dollar sign and comma.
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Decimals.IsPositiveCurrency(System.String,System.Boolean)">
            <summary>
            Tests for currency value greater than or equal to zero.  Allowed characters are dollar sign and comma.
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Decimals.IsPositiveDecimal(System.String,System.Boolean)">
            <summary>
            Test the parsed string to see if it is a decimal and is positive
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="T:DAL.Utilities.Library.DataTypes.Decimals.RoundMethod">
            <summary>
            Rounding methods supported by the Decimals.Round function
            </summary>
        </member>
        <member name="F:DAL.Utilities.Library.DataTypes.Decimals.RoundMethod.RoundAwayFromZero">
            <summary>
            
            </summary>
        </member>
        <member name="F:DAL.Utilities.Library.DataTypes.Decimals.RoundMethod.RoundTowardZero">
            <summary>
            
            </summary>
        </member>
        <member name="F:DAL.Utilities.Library.DataTypes.Decimals.RoundMethod.RoundNearest">
            <summary>
            
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Decimals.Round(System.Decimal,System.Int32,DAL.Utilities.Library.DataTypes.Decimals.RoundMethod)">
            <summary>
            Rounds a decimal using the given precision (number of decimal places) and the method specified
            </summary>
            <param name="value"></param>
            <param name="precision"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Decimals.Percent(System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Calculate the percent given the total and amount.
            </summary>
            <param name="amount">The amount ranging from 0 up</param>
            <param name="total">The total. If &lt;= 0 then 0% is instantly returned</param>
            <param name="places">The decimal placed to round the result.</param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Decimals.Percent100(System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Calculate the percent give the total and amount. Maximum percent of 100.
            </summary>
            <param name="amount">The amount ranging from 0 up</param>
            <param name="total">The total. If &lt;= 0 then 0% is instantly returned</param>
            <param name="places">The decimal placed to round the result.</param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Decimals.FormatCurrency(System.Decimal,System.String,System.String,DAL.Utilities.Data.Consultant.Currency)">
            <summary>
            Formats a decimal value as currency.  The template should include at least "{0}" to capture the decimal value and optionally the currency is "{1}".
            The currencyFormat is passed to ToString().
            
            If the decimal == decimal.MinValue (our de-facto null) an empty string is returned.
            </summary>
        </member>
        <member name="T:DAL.Utilities.Library.DataTypes.Integers">
            <summary>
            Summary description for Integer.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Integers.IsNumeric(System.String)">
            <summary>
            Tests whether an string can be cast to an int32
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Integers.IsPositiveNumeric(System.String,System.Boolean)">
            <summary>
            Tests the string to see if it is an integer > 0
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Integers.Parse(System.String,System.Int32)">
            <summary>
            Parses an string to an int.  If the string cannot be parsed then the default_value is returned instead.
            </summary>
            <param name="strValue">String numeric to be parsed</param>
            <param name="default_value">Value to return in case the string cannot be parsed</param>
            <returns>The parsed string or default value</returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Integers.Parse(System.String)">
            <summary>
            Tests strValue to see if it is numeric.
            </summary>
            <param name="strValue">The string to test</param>
            <returns>The int parsed or null if parsing failed.</returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Integers.ToOrdinal(System.Int32)">
            <summary>
            Convert an integer to an ordinal string (e.g. 1st, 2nd, 3rd, 4th)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:DAL.Utilities.Library.DataTypes.Result`2">
            <summary>
            A consitent method for returning additional data from a function without using pass by reference.
            ReturnValue holds what would have been the calls return value.
            Suppliment holds any additional data that you want to return
            </summary>
            <typeparam name="T">The ReturnValue type</typeparam>
            <typeparam name="U">The Suppliment type</typeparam>
        </member>
        <member name="T:DAL.Utilities.Library.DataTypes.Strings">
            <summary>
            Summary description for String.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.IsEmpty(System.String)">
            <summary>
            Tests whether the string strValue is equal to "" or string.empty.  Trims the string first
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.IsEmpty(System.String,System.Boolean)">
            <summary>
            Tests whether the string is null, equal to "" or string.empty.  Trims if trim_flag is true.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.IsNumeric(System.String)">
            <summary>
            Tests whether a string consists of only digits
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.Parse(System.Object,System.String)">
            <summary>
            Converts an object to a string using it's ToString() method.
            </summary>
            <param name="theObj"></param>
            <returns>Returns string.Empty if the object is null</returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.Parse(System.Object)">
            <summary>
            Converts an object to a string using it's ToString() method. Returns string.Empty if the object is null.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.ExceptionToText(System.Exception)">
            <summary>
            Renders a exception and all its inner exceptions to a string
            </summary>
            <param name="ex"></param>
            <remarks>Uses recursion to retrieve the inner exceptions. If there is a loop this method will cause a stack overflow.</remarks>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.ExceptionToDetailText(System.Exception)">
            <summary>
            Renders a exception and all its inner exceptions, the call stack and other data to a string
            </summary>
            <param name="ex"></param>
            <remarks>Uses recursion to retrieve the inner exceptions. If there is a loop this method will cause a stack overflow.</remarks>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.TextToHtml(System.String)">
            <summary>
            Converts text (usually entered from a TextArea or input field to HTML
            compatible data (Removes \r and replaces \n with &lt;br /&gt; and escapes any HTML special characters)
            </summary>
            <param name="text_string"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.TextToHtml(System.String,System.Boolean)">
            <summary>
            Converts text (usually entered from a TextArea or input field to HTML
            compatible data (Can replace new lines with &lt;br /&gt; and escapes any HTML special characters)
            </summary>
            <param name="text_string"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.TextToJavaScriptString(System.String)">
            <summary>
            Encodes a string for safety in outputting within a JavaScript string literal.
            Converts single quote to \', double quote to \", backslash to \\, carriage return to \r,
            newlines to \n, tabs to \t
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DAL.Utilities.Library.DataTypes.Strings.XmlEscapeString(System.String)" -->
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.StripHTML(System.String)">
            <summary>
            Removes all HTML tags leaving only the content between them. Does not modify whitespace.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.ToTitleCase(System.String,System.Boolean)">
            <summary>
            Title cases a string.  If onlyIfSafe is true then it does nothing if the string is already mixed case.
            </summary>
            <param name="input"></param>
            <param name="onlyIfSafe"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.TextToBase64(System.String)">
            <summary>
            Converts a UTF8 string to a Base64 string.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.Reverse(System.String)">
            <summary>
            Reverses the input string
            </summary>
            <remarks>http://weblogs.sqlteam.com/mladenp/archive/2006/03/19/9350.aspx</remarks>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.Format(System.String,System.Object)">
            <summary>
            Fills the formatted string's named parameters from Properties of the obj.
            </summary>
            <param name="format">String format. E.g., "My name is {Name}."</param>
            <param name="obj">The object used to fill the string.</param>
            <returns>The formatted string</returns>
            <remarks>This Format method has some serious limitations and only very basic utility.  For example you can get loops where the new text will also get
            processed and replaced if there are any {Name} tokens in the new text. Use caution.</remarks>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.Format(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Fills the formatted string's named parameters from name value pairs.
            </summary>
            <param name="format">String format. E.g., "My name is {Name}."</param>
            <param name="names_values">A collection of name value pairs used for replacement.</param>
            <returns>The formatted string</returns>
            <remarks>This Format method has some serious limitations and only very basic utility.  For example you can get loops where the new text will also get
            processed and replaced if there are any {Name} tokens in the new text. Use caution.</remarks>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.FormatJSON(System.String,System.String[])">
            <summary>
            Like string.Format but escapes each param for JSON before merging the values
            </summary>
            <param name="format"></param>
            <param name="name_values"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.FormatJSON(System.String,System.Object)">
            <summary>
            Fills the formatted string's named parameters from Properties of the obj escaped for JSON.
            </summary>
            <param name="format">String format. E.g., "My name is {Name}."</param>
            <param name="obj">The object used to fill the string.</param>
            <returns>The formatted string</returns>
            <remarks>This Format method has some serious limitations and only very basic utility.  For example you can get loops where the new text will also get
            processed and replaced if there are any {Name} tokens in the new text. Use caution.</remarks>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.NaturalCompareTo(System.String,System.String)">
            <summary>
            Performs a natural sort order comparison of the strings. This can be used by CompareTo methods of
            objects that want to be sorted. See: http://sourcefrog.net/projects/natsort/
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.Join(System.String,System.String[])">
            <summary>
            Joins the list of items into a single string with the separator splitting each item.
            If any items are equal to the separator (or null or empty) they are omitted.
            </summary>
            <param name="separator"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.SafeSubstring(System.String,System.Int32)">
            <summary>
            Return the substring starting at the startIndex to the end of the string. If the string is null return an empty string.
            </summary>
            <param name="startIndex">Index to start. If the index is negative it counts back from the end of the string.</param>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.SafeSubstring(System.String,System.Int32,System.Int32)">
            <summary>
            Return the substring. If the string is null return an empty string.
            </summary>
            <param name="startIndex">Index to start. If the index is negative it counts back from the end of the string.</param>
            <param name="length">Length of the substring. If the length is negative it counts back from the startIndex.</param>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.SafeSubpart(System.String,System.Int32,System.Int32)">
            <summary>
            Return the substring. If the string is null return an empty string.
            </summary>
            <param name="value"></param>
            <param name="startIndex">Index to start. If the index is negative it is set to zero.</param>
            <param name="endIndex">Index to end. If the index is >= 0 it counts back from the end of the string. If the index is positive it counts from the beginning of the string but exludes the value at the index</param>
            <remarks>If the start and end index result in a negative length then an empty string is returned</remarks>
            <example>
            "abc123".SafeSubpart(0, 0) == "abc123"<br />
            "abc123".SafeSubpart(0, 1) == "a"<br />
            "abc123".SafeSubpart(0, -1) == "abc12"<br />
            "abc123".SafeSubpart(3, -3) == ""<br />
            </example>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.SafeTrim(System.String)">
            <summary>
            Extension method that trims the string, but if the string is null then null is simply returned
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.SafeTrim(System.String,System.Char[])">
            <summary>
            Extension method that trims the string, but if the string is null then null is simply returned
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.SafeToLower(System.String)">
            <summary>
            Extension method that .ToLower()s the string, but if the string is null then null is simply returned
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.SafeToUpper(System.String)">
            <summary>
            Extension method that .ToUpper()s the string, but if the string is null then null is simply returned
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Strings.SafeContains(System.String,System.String)">
            <summary>
            Check if the value contains 'other'.  If the value is null it returns false.
            </summary>
        </member>
        <member name="T:DAL.Utilities.Library.DataTypes.Formatting">
            <summary>
            Reformats various values.  Does not perform any validation of the values or
            what value is allowed/expected in what position.
            
            If an input string does not meet the requirements for being reformatted it is
            simply returned unchanged.
            </summary>
        </member>
        <member name="F:DAL.Utilities.Library.DataTypes.Formatting.NorthAmericanPhoneFormats.USSeven">
            <summary>
            xxx-xxxx
            </summary>
        </member>
        <member name="F:DAL.Utilities.Library.DataTypes.Formatting.NorthAmericanPhoneFormats.USTen">
            <summary>
            (xxx) xxx-xxxx
            </summary>
        </member>
        <member name="F:DAL.Utilities.Library.DataTypes.Formatting.NorthAmericanPhoneFormats.USEleven">
            <summary>
            x (xxx) xxx-xxxx
            </summary>
        </member>
        <member name="F:DAL.Utilities.Library.DataTypes.Formatting.NorthAmericanPhoneFormats.USTwelve">
            <summary>
            +x (xxx) xxx-xxxx
            </summary>
        </member>
        <member name="F:DAL.Utilities.Library.DataTypes.Formatting.NorthAmericanPhoneFormats.DigitsOnly">
            <summary>
            xxxxxxx, xxxxxxxxxx, xxxxxxxxxxx
            </summary>
        </member>
        <member name="F:DAL.Utilities.Library.DataTypes.Formatting.NorthAmericanPhoneFormats.WithDashes">
            <summary>
            xxx-xxxx, xxx-xxx-xxxx, x-xxx-xxx-xxxx
            </summary>
        </member>
        <member name="M:DAL.Utilities.Library.DataTypes.Formatting.Format(System.String,DAL.Utilities.Library.DataTypes.Formatting.PostalCodeFormats,DAL.Utilities.Data.Geography.Country)">
            <summary>
            Reformats Postal Codes. If the postal code cannot be formatted the cleaned up string is returned (all non-alphanumeric characters removed)
            </summary>
            <param name="input"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Services.AjaxServices.EmitHTML(System.Web.UI.Control)">
            <summary>
            Renders a control to the Response Stream and ends the response.
            Do not catch the ThreadAbortException or the response will not end
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:DAL.Utilities.Services.AjaxServices.EmitJSON(System.String)">
            <summary>
            Emits the supplied json string and ends the response.
            </summary>
            <param name="json_string"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Services.AjaxServices.EmitJSON(System.String,System.String)">
            <summary>
            Emits the supplied json string and ends the response.
            Do not catch the ThreadAbortException or the response won't end.
            </summary>
            <param name="json_string"></param>
            <param name="mime_type">The mime type you wish to send</param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Services.AjaxServices.GetAjaxParameter">
            <summary>
            Checks the Query String and Form for a "callback" value and returns the value if found
            </summary>
            <returns>Callback value or an empty string</returns>
        </member>
        <member name="M:DAL.Utilities.Services.AjaxServices.GetAjaxParameter(System.String)">
            <summary>
            Checks the Query String and Form for a "callback" value and returns the value if found
            </summary>
            <returns>Callback value or an empty string</returns>
        </member>
        <member name="M:DAL.Utilities.Services.AjaxServices.ToJSONString(System.String)">
            <summary>
            Converts a string to a JavaScript string:
            "escaped string"
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Services.AjaxServices.ToJSONString(System.Boolean)">
            <summary>
            Converts a boolean to a JSON string value:
            true
            false
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Services.AjaxServices.ToJSONString(System.Collections.IList)">
            <summary>
            Converts a collection of objects to a JavaScript Array:
            Converts each array value to JSON
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.AjaxServices.ToJSONString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converts a collection of Name Value Pairs to a JSON string (as an object literal):
            {"escaped name":"escaped value","escaped name 2":"escaped value 2"}
            Names are always escaped and wrapped in quotes.
            Optionally escapes special characters in each value and wraps them in quotes.
            </summary>
        </member>
        <member name="P:DAL.Utilities.Services.ApplicationServices.ApplicationMode">
            <summary>
            Returns the ApplicationMode specified in the Web.Config. If the ApplicationMode is missing then "auto" is used.
            If the ApplicationMode is unrecognized then an exception is thrown.
            Valid values are:  auto, dev, test, pre, prod
            Note: a value of 'live' is accepted for 'prod'
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.ApplicationServices.GetAutoApplicationMode">
            <summary>
            Select an ApplicationMode based on the systems Enronment Variable
            </summary>
            <returns></returns>
        </member>
        <member name="P:DAL.Utilities.Services.ApplicationServices.WebEnvironment">
            <summary>
            Returns a valid WebEnvironment. If no valid web environment is found then an exception is thrown.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.ApplicationServices.ConfigSetting(System.String)">
            <summary>
            Returns a setting from the web.config using the same mode selection technique
            used by the ConnectionString method.  Returns the value of "setting_name"_Live|_Prod|_Test|_Dev based
            on the application mode
            </summary>
            <exception cref="T:System.ArgumentException">Throws an ArgumentException if the setting cannot be found</exception>
        </member>
        <member name="M:DAL.Utilities.Services.ApplicationServices.ConfigSetting(System.String,System.String)">
            <summary>
            Gets the web.config setting based on the setting name (appending the proper value based on application mode).
            If the setting is not found (and thus would return null) the default_value is returned instead.
            If the setting is found but is empty then empty will be returned.
            </summary>
            <param name="setting_name"></param>
            <param name="default_value"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Services.ApplicationServices.ConfigSetting(System.String,DAL.Utilities.Services.ApplicationMode)">
            <summary>
            Gets the web.config setting based on the setting name (appending the proper value based on the mode passed in).
            If the setting is not found (and thus would return null) the default_value is returned instead.
            If the setting is found but is empty then empty will be returned.
            
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.ApplicationServices.ConfigSetting(System.String,System.String,DAL.Utilities.Services.ApplicationMode)">
            <summary>
            Returns a setting from the web.config using the same mode selection technique
            used by the ConnectionString method.  Returns the value of "setting_name"_Prod|_Test|_Development based
            on the application mode passed in.
            If the setting is null then the default_value will return.  You can specify if the default_value should also be returned when the setting exists but is empty.
            </summary>
            <exception cref="T:System.ArgumentException">Throws an ArgumentException if the setting cannot be found</exception>
        </member>
        <member name="M:DAL.Utilities.Services.ApplicationServices.ConfigSettingExact(System.String,System.String)">
            <summary>
            Returns a setting from the web.config.
            If the setting is null (not defined) then the default_value will return.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.ApplicationServices.Get``1(System.String)">
            <summary>
            Returns an Application Object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:DAL.Utilities.Services.ApplicationServices.PhysicalPath">
            <summary>
            Returns the Root file system path of the application. This value removes any trailing slash. On any kind of error an empty string is returned.
            </summary>
        </member>
        <member name="P:DAL.Utilities.Services.ApplicationServices.VirtualPath">
            <summary>
            Get the base virtual directory of the Application. Represents the application URL. On any kind of error an empty string is returned
            </summary>
        </member>
        <member name="P:DAL.Utilities.Services.ApplicationServices.RequestUrl">
            <summary>
            Get the domain, path and resource for the current request. Excludes the query string
            </summary>
        </member>
        <member name="P:DAL.Utilities.Services.ApplicationServices.RequestUrlPath">
            <summary>
            Get the domain, path. Excludes the resource and query string
            </summary>
        </member>
        <member name="P:DAL.Utilities.Services.ApplicationServices.UserName">
            <summary>
            Returns the Identity.Name property with the Domain part removed
            </summary>
        </member>
        <member name="P:DAL.Utilities.Services.ApplicationServices.DomainUserName">
            <summary>
            Returns the Identity.Name property with the Domain part included
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.ApplicationServices.ConnectionString(System.String)">
            <summary>
            Returns the connection string for the current application mode
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.ApplicationServices.ConnectionString(System.String,System.String)">
            <summary>
            Returns the connection string for the current application mode
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.ApplicationServices.ConnectionString(System.String,DAL.Utilities.Services.ApplicationMode)">
            <summary>
            Attempts to find a connection string using the name and the current Application Mode.  For Example: "maindb_Dev" will be found
            for a name of "maindb" and an Application Mode of "Development".
            
            If no connection string is found for the current Application Mode then just the name is search. For Example: "maindb".
            </summary>
            <exception cref="T:System.ArgumentException">If no matching Connection String is found an Argument Exception is thrown</exception>
        </member>
        <member name="M:DAL.Utilities.Services.ApplicationServices.ConnectionString(System.String,System.String,DAL.Utilities.Services.ApplicationMode)">
            <summary>
            Attempts to find a connection string using the name and the current Application Mode.  For Example: "maindb_Dev" will be found
            for a name of "maindb" and an Application Mode of "Development".
            
            If no connection string is found for the current Application Mode then just the name is search. For Example: "maindb".
            
            If no connection string is found then the defaultValue is returned
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.ApplicationServices.ConnectionStringExact(System.String,System.String)">
            <summary>
            Returns the connection string for the name specified. Does not honor the application mode. If no value is found
            then an ArgumentException is thrown.
            </summary>
            <param name="connectionstring_name"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Services.ApplicationServices.SetFormsAuthenticationCookie(System.String,System.Boolean,System.String)">
            <summary>
            Creates and Sets a FormsAuthentication cookie. Does not redirect. Allows an optional userData string.
            User the FormsAuthentication settings from the web.config for the cookie settings
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.ApplicationServices.FormsAuthenticationLogout">
            <summary>
            Ends the Session and signs out of FormsAuthentication. Cleans up the related session and auth cookies.
            Redirects to the login page and ends the current response.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.CacheServices.Set``1(System.String,``0)">
            <summary>
            Store an item in the Cache.  It will delete after the timeoutMinues minutes pass.
            There is no sliding expiration.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.CacheServices.Set``1(System.String,``0,System.Int32)">
            <summary>
            Store an item in the Cache.  It will delete after the timeoutMinues minutes pass.
            There is no sliding expiration.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.CacheServices.Get``1(System.String,``0)">
            <summary>
            Get the object from the Cache for the key. If no item is found then
            the defaultValue is returned instead
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.CacheServices.Clear">
            <summary>
            Clears all cache entries
            </summary>
        </member>
        <member name="P:DAL.Utilities.Services.BasePage.VirtualPath">
            <summary>
            The Applications Base Virtual Path
            </summary>
            <remarks>Placed here for easy access with the HTML</remarks>
        </member>
        <member name="P:DAL.Utilities.Services.BaseMasterPage.VirtualPath">
            <summary>
            The Applications Base Virtual Path
            </summary>
            <remarks>Placed here for easy access with the HTML</remarks>
        </member>
        <member name="M:DAL.Utilities.Services.BaseMasterPage.FindControl(System.String)">
            <summary>
            Find controls in nested master pages. The first matching control encountered returns.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:DAL.Utilities.Services.ContextServices">
            <summary>
            Stored objects in a dictionary in the Context.Items store.  Adding, Removing, and Clearing only affect the Dictionary and not the actual store.
            Because clearing the Context.Items store causes other data (such as session) to be lost a dictionary is used as a substore for items managed by this class.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.ContextServices.Get``1(System.String,``0)">
            <summary>
            Gets the value for 'name' from the HttpContext item store. If the value equals null
            then the default value is stored in the session and is returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="default_value"></param>
            <returns></returns>
        </member>
        <member name="T:DAL.Utilities.Services.PasswordService">
            <summary>
            Salted password hashing with PBKDF2-SHA1.
            Author: havoc AT defuse.ca
            www: http://crackstation.net/hashing-security.htm
            Compatibility: .NET 3.0 and later.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.PasswordService.CreateHash(System.String)">
            <summary>
            Creates a salted PBKDF2 hash of the password.
            </summary>
            <param name="password">The password to hash.</param>
            <returns>The hash of the password.</returns>
        </member>
        <member name="M:DAL.Utilities.Services.PasswordService.ValidatePassword(System.String,System.String)">
            <summary>
            Validates a password given a hash of the correct one.
            </summary>
            <param name="password">The password to check.</param>
            <param name="correctHash">A hash of the correct password.</param>
            <returns>True if the password is correct. False otherwise.</returns>
        </member>
        <member name="M:DAL.Utilities.Services.PasswordService.SlowEquals(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays in length-constant time. This comparison
            method is used so that password hashes cannot be extracted from
            on-line systems using a timing attack and then attacked off-line.
            </summary>
            <param name="a">The first byte array.</param>
            <param name="b">The second byte array.</param>
            <returns>True if both byte arrays are equal. False otherwise.</returns>
        </member>
        <member name="M:DAL.Utilities.Services.PasswordService.PBKDF2(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the PBKDF2-SHA1 hash of a password.
            </summary>
            <param name="password">The password to hash.</param>
            <param name="salt">The salt.</param>
            <param name="iterations">The PBKDF2 iteration count.</param>
            <param name="outputBytes">The length of the hash to generate, in bytes.</param>
            <returns>A hash of the password.</returns>
        </member>
        <member name="M:DAL.Utilities.Services.CryptoService.Encrypt(System.Byte[],System.Byte[],DAL.Utilities.Services.CryptoService.CryptoType)">
            <summary>
            Encrypts the message. Returns the IV followed by the cypher text. The length of the IV depends on the block size of the selected crypto type.
            The Decrypt method automatically extracts the IV from the message before decrypting
            </summary>
            <param name="key"></param>
            <param name="message"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Services.CryptoService.DecryptFromBase64(System.String,System.String,DAL.Utilities.Services.CryptoService.CryptoType)">
            <summary>
            Decrypts the message. Expects the message to be proceeded by the IV bytes.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.CryptoService.Decrypt(System.Byte[],System.Byte[],DAL.Utilities.Services.CryptoService.CryptoType)">
            <summary>
            Decrypts the message. Expects the message to be proceeded by the IV bytes.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.FileServices.IsFile(System.String)">
            <summary>
            Tests the full path to see if the file exists.
            </summary>
            <param name="fileNameAndPath">The full path and filename</param>
            <returns>True if the file exists else false</returns>
        </member>
        <member name="M:DAL.Utilities.Services.FileServices.IsFile(System.String,System.String)">
            <summary>
            Checks for the existence of a file
            </summary>
            <param name="directoryPath">The full path to the file. It may end in a path seperator.</param>
            <param name="fileName">The file name</param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Services.FileServices.IsDirectory(System.String)">
            <summary>
            Checks for the existence of a directory
            </summary>
            <param name="directoryPath">Path to check. May end with a path separator</param>
            <returns>True if the path is found else false.</returns>
        </member>
        <member name="M:DAL.Utilities.Services.FileServices.GetFileNameFromPath(System.String)">
            <summary>
            Returns the filename part of a path and file name
            </summary>
            <param name="path">The full path and file name</param>
            <returns>Returns just the file name.</returns>
        </member>
        <member name="M:DAL.Utilities.Services.FileServices.GetPathFromFileName(System.String)">
            <summary>
            Returns the path part of a path and file name
            </summary>
            <param name="path">The full path and file name</param>
            <returns>Returns just the path with no trailing slash.</returns>
        </member>
        <member name="M:DAL.Utilities.Services.FileServices.Delete(System.String,System.String)">
            <summary>
            Deletes the specified file in the given path. The path may have a trailing slash.
            </summary>
            <param name="filename">The file name</param>
            <param name="path">The full path</param>
            <returns>
            Returns false if the file does not exist. True if the file was deleted.
            </returns>
        </member>
        <member name="M:DAL.Utilities.Services.FileServices.Move(System.String,System.String)">
            <summary>
            Moves a file from the source to the destination.  Might also be used to rename a file.
            </summary>
            <returns>true if the file is moved, false if the file does not exist. Exception for any other error</returns>
        </member>
        <member name="M:DAL.Utilities.Services.FileServices.GetFriendlyFileSize(System.String)">
            <summary>
            Gets the size of a file and returns a friendly size string.  If the file does not exist
            then "0 bytes" is returned.
            </summary>
            <param name="fileNameAndPath"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Services.FileServices.GetExtension(System.String)">
            <summary>
            Parses the filename for the extension part. The file existance is not checked.
            </summary>
            <param name="filename">Name of the file</param>
            <returns>The files exception.</returns>
        </member>
        <member name="M:DAL.Utilities.Services.FileServices.GetFileExtension(System.String)">
            <summary>
            Retrieves a file's extension using the .Net File libraries. The full path and filename
            must be used and the file must exist
            </summary>
            <param name="fileNameAndPath">Complete file path and file name</param>
            <returns>The full file extension. An exception is thrown if the file does not exist.</returns>
        </member>
        <member name="M:DAL.Utilities.Services.FileServices.GenerateUniqueFilename(System.String,System.String)">
            <summary>
            Creates a unique file name in the path specified based on the file name given by prefixing
            a large random number.  The length of the filename is not checked and could cause an exception.
            </summary>
            <param name="path"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Services.FileServices.CombineAndCorrectPath(System.String,System.String)">
            <summary>
            Combines the path without rooting and converts any / to \
            </summary>
            <param name="path"></param>
            <param name="file_name"></param>
            <returns></returns>
        </member>
        <member name="M:DAL.Utilities.Services.FileServices.CombinePath(System.String,System.String)">
            <summary>
            Combines paths without rooting (trims trailing/leading slashes as needed so paths are treated as relative)
            </summary>
            <param name="path"></param>
            <param name="file_name"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DAL.Utilities.Services.FileServices.StripInvalidCharacters(System.String)" -->
        <member name="M:DAL.Utilities.Services.FileServices.SendFile(System.Web.HttpResponse,System.IO.FileInfo,System.Boolean,System.Boolean)">
            <summary>
            Streams the specified file out over the HttpResponse. Sets appropriate headers. Does not end the response.
            </summary>
            <param name="response"></param>
            <param name="file"></param>
        </member>
        <member name="M:DAL.Utilities.Services.FormServices.SetControl(System.Web.UI.HtmlControls.HtmlImage,System.String)">
            <summary>
            Sets the Src of an HTML Image
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.FormServices.SetControl(System.Web.UI.HtmlControls.HtmlContainerControl,System.String)">
            <summary>
            Sets the InnerHTML of an HTML Control
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.FormServices.SetControl(System.Web.UI.HtmlControls.HtmlContainerControl,System.String,System.Boolean)">
            <summary>
            Sets the InnerHtml or InnerText of an HTML Control
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.FormServices.SetControl(System.Web.UI.HtmlControls.HtmlGenericControl,System.String)">
            <summary>
            Sets the InnerHTML of an HTML Control
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.FormServices.SetControl(System.Web.UI.HtmlControls.HtmlGenericControl,System.String,System.Boolean)">
            <summary>
            Sets the InnerHtml or InnerText of an HTML Control
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.FormServices.SetControl(System.Web.UI.HtmlControls.HtmlAnchor,System.String,System.String,System.Boolean)">
            <summary>
            Sets an HTMLAnchor. Pass null for a value to have it ignored (not changed).
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.FormServices.SetControl(System.Web.UI.WebControls.HyperLink,System.String,System.String,System.Boolean)">
            <summary>
            Sets an HyperLink. Pass null for a value to have it ignored (not changed).
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.FormServices.SetControl(System.Web.UI.HtmlControls.HtmlInputControl,System.Boolean)">
            <summary>
            If the HtmlInput Control is a Check or Radio then the checked attribute is set instead of the value.
            </summary>
            <param name="control"></param>
            <param name="value"></param>
            <remarks>If you need to set the Check or Radio button value then use SetControl(HtmlInputControl, string)</remarks>
        </member>
        <member name="M:DAL.Utilities.Services.FormServices.SetControl(System.Web.UI.WebControls.ListControl,System.String)">
            <summary>
            Sets the list control's SelectedValue property. If control is null or the value fails
            to set *no exception is thrown*
            </summary>
            <param name="control"></param>
            <param name="value"></param>
        </member>
        <member name="M:DAL.Utilities.Services.FormServices.SetControl(System.Web.UI.HtmlControls.HtmlSelect,System.String)">
            <summary>
            Sets the list control's SelectedValue property. If control is null or the value fails
            to set *no exception is thrown*
            </summary>
            <param name="control"></param>
            <param name="value"></param>
        </member>
        <member name="M:DAL.Utilities.Services.FormServices.SetControl(System.Web.UI.WebControls.ListControl,System.Int32)">
            <summary>
            Sets the list control's SelectedValue propert. If control is null or the value fails
            to set *no exception is thrown*
            </summary>
            <param name="control"></param>
            <param name="value"></param>
        </member>
        <member name="T:DAL.Utilities.Services.FormServices.FormError">
            <summary>
            A simple class for returning an error that can be
            associated to a particular field.
            </summary>
        </member>
        <member name="T:DAL.Utilities.Services.FormServices.FormErrors">
            <summary>
            Manage a collection of form errors. Multiple errors can be added for a single
            Field name key.
            </summary>
        </member>
        <member name="P:DAL.Utilities.Services.FormServices.FormErrors.Item(System.String)">
            <summary>
            Returns the list of errors for a particular field name. If there are no
            errors then NULL is returned
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:DAL.Utilities.Services.AjaxPage.EnableOutOfOrderRender">
            <summary>
            When Out Of Order Render is enabled it disables EventValidation for the page so
            a control can be rendered outside the normal Render Phase. This is used by the AjaxServices classes.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.SessionServices.Get``1(System.String)">
            <summary>
            Gets the value for 'name' from the HttpContext session store. If the value equals null
            then the default value is stored in the session and is returned. If the session is not initialized then it returns the default value for the type.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.SessionServices.Get``1(System.String,``0)">
            <summary>
            Gets the value for 'name' from the HttpContext session store. If the value equals null
            then the default value is stored in the session and is returned. If the session is not initialized then it returns the default value.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.SessionServices.Set``1(System.String,``0)">
            <summary>
            Sets a session value. If the session has not been initialized then nothing happens.
            </summary>
        </member>
        <member name="M:DAL.Utilities.Services.WebServices.GetWebPageSource(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.Int32,System.Boolean)">
            <summary>
            Get the content from a URL. If the page returns a non-success status an empty string is returned.
            </summary>
        </member>
    </members>
</doc>
